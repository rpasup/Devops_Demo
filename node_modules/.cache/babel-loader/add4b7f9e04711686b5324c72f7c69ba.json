{"ast":null,"code":"import { EventEmitter } from \"events\";\nimport dispatcher from \"../appDispatcher\";\nimport actionTypes from \"../actions/actionTypes\";\nlet _products = [];\n\nclass ProductStore extends EventEmitter {\n  constructor() {\n    super();\n\n    this.addChangeListener = (eventName, callback) => {\n      this.on(eventName, callback);\n    };\n\n    this.removeChangeListener = (eventName, callback) => {\n      this.removeListener(eventName, callback);\n    };\n\n    this.emitChange = eventName => {\n      this.emit(eventName);\n    };\n\n    this.getProducts = () => {\n      console.log(`products ${_products}`);\n      return _products;\n    };\n\n    this.dispatcherCallback = action => {\n      switch (action.actionTypes) {\n        case actionTypes.SET_PRODUCTS:\n          console.log(`dispatcherCallback action ${JSON.stringify(action.products)}`); // this.setProducts(action.products);\n\n          _products = action.products; // this.emitChange(action.actionType);\n\n          this.emit(action.actionType);\n          break;\n\n        default:\n        case actionTypes.ADD_PRODUCT:\n          const existingProdss = [..._products];\n          existingProdss.push(action.product);\n          _products = existingProdss;\n          this.emit(actionTypes.SET_PRODUCTS);\n      }\n\n      return true;\n    };\n\n    this.dispatchToken = dispatcher.register(this.dispatcherCallback);\n  }\n\n}\n\nexport default new ProductStore();","map":{"version":3,"sources":["/home/rajasekhar/Desktop/assignment04/src/flux/store/store.js"],"names":["EventEmitter","dispatcher","actionTypes","_products","ProductStore","constructor","addChangeListener","eventName","callback","on","removeChangeListener","removeListener","emitChange","emit","getProducts","console","log","dispatcherCallback","action","SET_PRODUCTS","JSON","stringify","products","actionType","ADD_PRODUCT","existingProdss","push","product","dispatchToken","register"],"mappings":"AAAA,SAASA,YAAT,QAA6B,QAA7B;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AACA,OAAOC,WAAP,MAAwB,wBAAxB;AACA,IAAIC,SAAS,GAAG,EAAhB;;AACA,MAAMC,YAAN,SAA2BJ,YAA3B,CAAwC;AACtCK,EAAAA,WAAW,GAAG;AACZ;;AADY,SAIdC,iBAJc,GAIM,CAACC,SAAD,EAAYC,QAAZ,KAAyB;AAC3C,WAAKC,EAAL,CAAQF,SAAR,EAAmBC,QAAnB;AACD,KANa;;AAAA,SAQdE,oBARc,GAQS,CAACH,SAAD,EAAYC,QAAZ,KAAyB;AAC9C,WAAKG,cAAL,CAAoBJ,SAApB,EAA+BC,QAA/B;AACD,KAVa;;AAAA,SAYdI,UAZc,GAYAL,SAAD,IAAe;AAC1B,WAAKM,IAAL,CAAUN,SAAV;AACD,KAda;;AAAA,SAgBdO,WAhBc,GAgBA,MAAM;AAClBC,MAAAA,OAAO,CAACC,GAAR,CAAa,YAAWb,SAAU,EAAlC;AACA,aAAOA,SAAP;AACD,KAnBa;;AAAA,SAyBdc,kBAzBc,GAyBQC,MAAD,IAAY;AAC/B,cAAQA,MAAM,CAAChB,WAAf;AACE,aAAKA,WAAW,CAACiB,YAAjB;AACEJ,UAAAA,OAAO,CAACC,GAAR,CACG,6BAA4BI,IAAI,CAACC,SAAL,CAAeH,MAAM,CAACI,QAAtB,CAAgC,EAD/D,EADF,CAIE;;AACAnB,UAAAA,SAAS,GAAGe,MAAM,CAACI,QAAnB,CALF,CAME;;AACA,eAAKT,IAAL,CAAUK,MAAM,CAACK,UAAjB;AACA;;AACF;AACA,aAAKrB,WAAW,CAACsB,WAAjB;AACE,gBAAMC,cAAc,GAAG,CAAC,GAAGtB,SAAJ,CAAvB;AACAsB,UAAAA,cAAc,CAACC,IAAf,CAAoBR,MAAM,CAACS,OAA3B;AACAxB,UAAAA,SAAS,GAAGsB,cAAZ;AACA,eAAKZ,IAAL,CAAUX,WAAW,CAACiB,YAAtB;AAfJ;;AAiBA,aAAO,IAAP;AACD,KA5Ca;;AAEZ,SAAKS,aAAL,GAAqB3B,UAAU,CAAC4B,QAAX,CAAoB,KAAKZ,kBAAzB,CAArB;AACD;;AAJqC;;AAgDxC,eAAe,IAAIb,YAAJ,EAAf","sourcesContent":["import { EventEmitter } from \"events\";\r\nimport dispatcher from \"../appDispatcher\";\r\nimport actionTypes from \"../actions/actionTypes\";\r\nlet _products = [];\r\nclass ProductStore extends EventEmitter {\r\n  constructor() {\r\n    super();\r\n    this.dispatchToken = dispatcher.register(this.dispatcherCallback);\r\n  }\r\n  addChangeListener = (eventName, callback) => {\r\n    this.on(eventName, callback);\r\n  };\r\n\r\n  removeChangeListener = (eventName, callback) => {\r\n    this.removeListener(eventName, callback);\r\n  };\r\n\r\n  emitChange = (eventName) => {\r\n    this.emit(eventName);\r\n  };\r\n\r\n  getProducts = () => {\r\n    console.log(`products ${_products}`);\r\n    return _products;\r\n  };\r\n\r\n  //   setProducts = (products) => {\r\n  //     _products = products;\r\n  //   };\r\n\r\n  dispatcherCallback = (action) => {\r\n    switch (action.actionTypes) {\r\n      case actionTypes.SET_PRODUCTS:\r\n        console.log(\r\n          `dispatcherCallback action ${JSON.stringify(action.products)}`\r\n        );\r\n        // this.setProducts(action.products);\r\n        _products = action.products;\r\n        // this.emitChange(action.actionType);\r\n        this.emit(action.actionType);\r\n        break;\r\n      default:\r\n      case actionTypes.ADD_PRODUCT:\r\n        const existingProdss = [..._products];\r\n        existingProdss.push(action.product);\r\n        _products = existingProdss;\r\n        this.emit(actionTypes.SET_PRODUCTS);\r\n    }\r\n    return true;\r\n  };\r\n}\r\n\r\nexport default new ProductStore();\r\n"]},"metadata":{},"sourceType":"module"}